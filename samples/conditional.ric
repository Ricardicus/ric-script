#!/bin/ric
;; testValues ;; {
  a = 1
  b = 0
  c = 1
  d = 0
  @ setVals(a_, b_, c_, d_) {
    a = a_
    b = b_
    c = c_
    d = d_
  }

  @ getVals() {
    -> [a, b, c, d]
  }
}


@ testConditionals(vals) {
  values = vals::getVals()
  a = values[0]
  b = values[1]
  c = values[2]
  d = values[3]

  print("=== a=" + a + " b=" + b + " c=" + c + " d=" + d + " ===")
  ? [ a || b || c || d ] {
    print("a || b || c || d")
  }

  ? [ a || b || c && d ] {
    print("a || b || c && d")
  }

  ? [ a && b && c && d ] {
    print("a && b && c && d")
  }

  ? [ a && b && c || d ] {
    print("a && b && c || d")
  }

  ? [ a || b && c ] {
    print("a || b && c")
  }
  print("=======================")

}

vals = testValues()

? [ len(args) == 6 ] {
  vals::setVals(args[2], args[3], args[4], args[5])
  print(vals::getVals())
  testConditionals(vals)
} ~ {
  # Standard test
  vals::setVals(0, 0, 0, 0)
  testConditionals(vals)
  vals::setVals(0, 0, 0, 1)
  testConditionals(vals)
  vals::setVals(0, 0, 1, 0)
  testConditionals(vals)
  vals::setVals(0, 0, 1, 1)
  testConditionals(vals)
  vals::setVals(0, 1, 0, 0)
  testConditionals(vals)
  vals::setVals(0, 1, 0, 1)
  testConditionals(vals)
  vals::setVals(0, 1, 1, 0)
  testConditionals(vals)
  vals::setVals(0, 1, 1, 1)
  testConditionals(vals)
  vals::setVals(1, 0, 0, 0)
  testConditionals(vals)
  vals::setVals(1, 0, 0, 1)
  testConditionals(vals)
  vals::setVals(1, 0, 1, 0)
  testConditionals(vals)
  vals::setVals(1, 0, 1, 1)
  testConditionals(vals)
  vals::setVals(1, 1, 0, 0)
  testConditionals(vals)
  vals::setVals(1, 1, 0, 1)
  testConditionals(vals)
  vals::setVals(1, 1, 1, 0)
  testConditionals(vals)
  vals::setVals(1, 1, 1, 1)
}



