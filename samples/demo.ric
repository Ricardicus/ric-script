#!/usr/bin/ric

# Conditionals
? [ 1 == 1 ] {
  print("True condition")
}

? [ 1 == 0 ] {
  # You shall not pass - Gandalf
} ~ {
  print("Untrue condition")
}

# Placing a dot in front of a condition
# makes it a return spot, operator '@' returns there.
a = 1338

. [ a == 1337 ] {
  print("Now the variable is: " + a)
  print("yey!")
} ~ {
  print("A variable was not 1337, it was: " + a)
  a = 1337
  print("Re-evaluating")
  @
}

# Lists
h = [ "hej", "hopp" ]
print("len(h): " + len(h))

h.append("hejsan")

print("len(h): " + len(h))

h = [h, "hoppsan"]

print("len(h): " + len(h))
print("h:")
print(h)
print("Traversing and printing h: ")
print("====================")

i = 0
. [ i < len(h) ] {
  printf("h[" + i + "]: ")
  print(h[i])
  i = i + 1
  @
}

print("====================")

# Function definitions and pointers

# Defining a function
@Â hej (a, b) {
  # Calling a with b as argument.
  # a should be a function pointer (dynamically type)
  # otherwise execution stops (no exception handling)
  # with error message
  a(b)
}

# Defining a function
@ willprint (a) {
  print(a)
}

# Calling out 'hej' function with our 'willprint' function as first argument
hej(willprint, "hej")
# Calling out 'hej' function with standard library 'print' function as first argument
print.hej("hejsan")

# Dictionary expressions

s = {"hello": "world", "elit": 1337}
s.print()
print(s["hello"])
print(s["elit"])

# extending with more fields
s["new field"] = 1337
print(s)
print(s["new field"])

# extending with another dictionary
s["dict"] = {"hello": "world"}
print(s)
print(s["dict"]["hello"])

# Calling a function pointer in a list and a dictionary
@ foo () { print("foo") }
@ bar () { print("bar") }

d = {"foo": foo, "bar": bar}
d["foo"]()
d["bar"]()

l = [foo, bar]
l[0]()
l[1]()

# Ric-script classes

;; myClass ;; {
  myMem = "not updated"
  @ myClass () {
    print("I get constructed!")
    print("my memory is: " + myMem)
  }

  @ set(a) {
    myMem = a
  }

  @ get() {
    -> myMem
  }
}

c = myClass()
print(c::get())
c::set("updated from the outside")
print(c::get())

# Creating fibbonacci series through advanced
# list initialization
s = [(15 ... i ) {
  @ fibPos (a) {
    ? [ a == 0 ] { -> 0 }
    ? [ a == 1 ] { -> 1 }
    -> fibPos(a-1) + fibPos(a-2) 
  }
  fibPos(i)
}]
s.print()


