# Numbers
a = 2
1337        
1.337
(1335) + 1 + 1
1337/(1+2)

# Variable declaration
a = 1337

# printing a declare variable
print(a)

# Some math, should print 1337
print(a / 2 + 1337/ 2 +1337 % 2 )

# Declaration
b = " hejsan!"

# Using the declaration
print("hello" + " hello!" + b)

# Adding strings with numbers and digits and IDs
print("hello " + 1337.7 + " " + 14 + " " + a)

# Assigning either 1 or 0 to variables 
# based on conditionals
b = "hello" == "hello"
# Should print 1
print(b)

b = ( "hello" == "hi" )
# Should print 0
print(b)

"10.1 > 10.0: "
b = 10.1 > 10.0
print(b)

"10.1 < 10.0:"
b = 10.1 < 10.0
print(b)

"10.1 <= 10.1:"
b = 10.1 <= 10.1
print(b)

"10.1 >= 10.1:"
b = 10.1 >= 10.1
print(b)

5 "10.1 >= 10.0: "
b = 10.1 >= 10.0
print(b)

"10.1 <= 10.0:"
b = 10.1 <= 10.0
print(b)

? [ 1 ] {
  
  # should print 1337
  a = 1337
  print(a)

}

? [ b ] {
  
  # should not print 1337
  a = 1337
  print(a)

}

# Some if-else if- else logic
p = 1337
? [ p < 1337 ] {
  print("Something went wrong.. Not supposed to be in this 'if' section.")
} ~[p == 1338] {
 print("There is something wrong.. I am in an 'else-if' section..")
} ~[p == 1337] {
  print("Yey, I am in an else-if!")
} ~ {
  print("Nope, something isn't right. I am in an 'else' section..")
}

@ foobar() {
  
  b = "hello from foobar"
  print(b)

}

foobar()

# A while loop

i = 0

. [ i < 5 ] {
  i = i + 1
  print(i)
  @
}

# A funny feature with this language
a = 1338

. [ a == 1337 ] {
  print("Now the variable is: " + a)
  print("yey!")
} ~ {
  print("A variable was not 1337, it was: " + a)
  a = 1337
  print("Re-evaluating")
  @
}

"================"
" Nested looping"
"================"

# Nested loops
a = 0
. [ a < 2 ] {
  b = 0
  . [ b < 2 ] {
    c = 0
    . [ c < 2 ] {
      print ( "a: " + a + ", b: " + b + ", c: " + c )
      c = c + 1
      @
    }
    b = b + 1
    @
  }
  a = a + 1
  @
}

"================"

@ testFunc(a,b,c) {
  
  print("arg1: " + a + ", arg2: " + b + ", arg3: " + c)

}

testFunc(14,12, 15)

# System call via variable
syscall = "echo 'hello from the shell via variable, the variable a has the value: " + a + "'"
$ syscall

# system call directly, not via variable
$ "echo 'hello from the shell directly, the variable a has the value: " + a + "'"

a = 0
. [ a < 4 ] {
  a = a + 1
  print( a )
  # Deciding on wether or not to continue the loop
  ? [ a >= 2 ] {
    !@
  }
  @
}

@ calcGCD(a, b) {
    ? [ b == 0 ] { 
      -> a
    } ~ { 
      -> calcGCD(b , (a % b) )
    }
}

x = 1204320
y = 12390

print( "Greatest common denominator of " + x + " and " + y + " is: " + calcGCD(x,y) )

@ foobar0() {
  print("Foobar!")
}

@ foobar1(a) {
  print("Foobar!" + a)
}

@ foobar2(a, b) {
  print("Foobar!" + a + b)
}

@ foobar3(a, b, c) {
  print("Foobar!" + a + b + c)
}

# Reusing a to point to different functions
# These function differ in name and number of arguments
a = foobar0
a()
a = foobar1
a(" foo")

a = foobar2
a(" foo","bar")

a = foobar3
a(" foo ", "bar ", ":)")

# Function with function pointer as argument
@ hej (a,b) {
	# arg1 should be a function pointer
	a( b )
}

hej(print, "hejsan")

s = ["hej", 1337, "hejsan"]

print(s)

print(s[0])
print(s[1])
print(s[2])

a = 1337

q = [a, s]

print(q)

print(q[0])
print(q[1])

print(q[1][0])
print(q[1][1])
print(q[1][2])

f = [1337, q]

print(f[1][1][0])
print(f[1][1][1])
print(f[1][1][2])

h = ["foo"]

append(h, "bar")

print(h)

print( len(h) )

i = 0
. [ i < len(h) ] {
  print(h[i])
  i = i + 1
  @
}

append(h, "foo")
append(h, "bar")

h[0] = "Foobar! foo "

print(h[0])

i = 0
. [ i < len(h) ] {
  print(h[i])
  i = i + 1
  @
}

print(h)

# Multiply string with integers
s = "hej " * 3
print(s)

print("Nu e de slut")


# Some printing
print({"a": 1337})
print({"a": {"b": 1337}})
print([1,2,3, {"a": 1337}])
print({"a" : [{"a": 1337}, 1337]})
