# For-eaching
# Integers
limit = 10
. ( limit ... i ) {
  print(i)
}

# Dictionary
dict = {"a" : 1, "b" : 2, "c" : 3}
. ( dict ... key ) {
  print(key + ": " + dict[key])
}

# Strings
string = "Hello world!"
. ( string ... c ) {
  print(c)
}

# Lists
list = ["a", 2, "b", 4]
. ( list ... entry ) {
  print(entry)
}

# Constructing lists
print([(
  10 ... i
) {
  text(i * 10)
}])

# Constructing lists, in a complex fashion
print([(
  5 ... i
) {
  a = [i+1, i+2, i+3]
  text(a[2])
  text(a[1])
  text(a[0])
}])

# Check that for-each locals overwrite globals
i = 0
. ( 2 ... i ) {
  print(i)
}
# Make sure it doesn't mess up the global namespace
print(i)

# Creating fibbonacci series through advanced
# list initialization
s = [(15 ... i ) {
  @ fibPos (a) {
    ? [ a == 0 ] { -> 0 }
    ? [ a == 1 ] { -> 1 }
    -> fibPos(a-1) + fibPos(a-2) 
  }
  fibPos(i)
}]
print(s)

# Big ints can be used to make extremely long loops
s = ""
. ( bigInt(10) ... i ) {
  ? [ i > 0 ] { s += ", " }
  s += i 
}
print(s)
