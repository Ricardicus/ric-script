@ foobar0() {
  print("Foobar!")
}

@ foobar1(a) {
  print("Foobar!" + a)
}

@ foobar2(a, b) {
  print("Foobar!" + a + b)
}

@ foobar3(a, b, c) {
  print("Foobar!" + a + b + c)
}

# Reusing a to point to different functions
# These function differ in name and number of arguments
a = foobar0
a()
a = foobar1
a(" foo")

a = foobar2
a(" foo","bar")

a = foobar3
a(" foo ", "bar ", ":)")

# Function with function pointer as argument
@Â hej (a,b) {
	# arg1 should be a function pointer
	a( b )
}

@ willprint (a) {
  print(a)
}

print.hej("hejsan")
willprint.hej("hej")

@ returnZero() {
	-> 0
}

? [ ! returnZero() ] {
	a = returnZero
	print(a())
}
