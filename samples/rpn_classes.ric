#!/usr/bin/ric
# RPN calculator implementation in ric-script
:: RPN :: {
  stack = {"head" : 0, "data" : []}

  @ pop() {
    head = stack["head"]
    ? [ head == 0 ] {
      print("Too few arguments on the stack. Goodbye!")
      exit(2)
    }
    head = head - 1
    val = stack["data"][head]
    stack["head"] = head
    -> val
  }

  @ push (val) {
    head = stack["head"]
    ? [ head >= len(stack["data"]) ] {
      append(stack["data"], val)
    } ~ {
      stack["data"][head] = val
    }
    stack["head"] = head + 1
  }

  @ eval (op) {
    ? [ op == '+' ] {
      -> pop() + pop()
    } ~[ op == '-' ] {
      tmp = pop()
      -> pop() - tmp
    } ~[ op == '*' ] {
      -> pop() * pop()
    } ~[ op == '/' ] {
      tmp = pop()
      -> pop() / tmp
    } ~ {
      -> 0
    }
  }

  @ printResult() {
    ? [ stack["head"] > 0 ] {
      print(stack["data"][ stack["head"] - 1 ])
    }
  }

  @ reset () {
    stack["head"] = 0
  }
}

@ isNumber(num) {
  numberChars = ['0','1','2','3','4','5','6','7','8','9']
  isNr = 1
  i = 0
  . [ i < len(num) ] {
    ? [ contains( numberChars, num[i] ) ] {
      i = i + 1
      @
    } ~ {
      isNr = 0
    }
  }
  -> isNr
}

print("RPN Calculator (quit by typing 'q'):")

operators = ["+", "*", "-", "/"]
calculator = RPN()
run = 1
. [ run ] {
  in = input(">> ")
  expr = split(in, " ")
  i = 0
  . [ i < len(expr) ] {
    ? [ isNumber(expr[i]) ] {
      calculator::push( parseInt(expr[i]) )
    } ~[ contains(operators, expr[i]) ] {
      s = calculator::eval(expr[i])
      calculator::push(s)
    } ~[ contains(expr[i], "q") ] {
      run = 0
    } ~ {
      print("Sorry, I don't understad this: " + expr[i])
    }
    i = i + 1
    @
  }
  calculator::printResult()
  calculator::reset()
  @
}
