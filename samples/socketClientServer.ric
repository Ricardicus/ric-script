#!/usr/bin/ric
# Example of how to use the built in
# socket interface in ric script.
# This is an echo-server.

reads = 10
sends = 10

@ usage () {
  print("usage: " + args[0] + " " + args[1] + " host port content-to-write")
  exit(1) 
}

? [ args.len() < 5 ] {
  usage()
}

@ clientThread () {
  i = 0
  . [ i < sends ] {
    print("Opening connection to host: " + args[2] + ":" + args[3])
    s = socketConnect(args[2], args[3])
    ? [ s < 0 ] {
      print("Failed to create the socket, sorry.. error code: " + s)
      exit(1)
    }

    t = s.socketWrite(args[4])
    ? [ t > 0 ] {
      print("Sent " + t + " bytes to server.")
    }
    s.socketClose()
    sleep(1)
    i += 1
    @
  }
}

@ serverThread () {
  s = socketServer(args[3])
  ? [ s < 0 ] {
    print("Failed to create the socket, sorry..")
    exit(1)
  }

  i = 0
  . [ i < reads ] {
    t = s.socketAccept()
    ? [ t > 0 ] {
      in = t.socketRead(50)
      print("read " + in.len() + " bytes: " + in)
      t.socketWrite(in)
      t.socketClose()
    }
    i += 1
    @
  }

  s.socketClose()
}

# Start server thread immediately
serverThread.setTimeout(0)
# Start client server one second later
clientThread.setTimeout(1)



